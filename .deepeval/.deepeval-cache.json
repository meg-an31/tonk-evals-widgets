{"test_cases_lookup_map": {"{\"actual_output\": \"// component file:\\nimport React, { useState, useEffect } from 'react';\\nimport BaseWidget from '../../templates/BaseWidget';\\nimport { WidgetProps } from '../../index';\\n\\nconst PomodoroTimer: React.FC<WidgetProps> = ({ width, height, theme }) => {\\n  const [time, setTime] = useState<number>(1500); // 25 minutes in seconds\\n  const [isActive, setIsActive] = useState<boolean>(false);\\n  const [isWorkSession, setIsWorkSession] = useState<boolean>(true);\\n  const [sessionCount, setSessionCount] = useState<number>(0);\\n\\n  useEffect(() => {\\n    let interval: NodeJS.Timeout;\\n    if (isActive && time > 0) {\\n      interval = setInterval(() => {\\n        setTime(prev => prev - 1);\\n      }, 1000);\\n    } else if (time === 0) {\\n      clearInterval(interval);\\n      setTimeout(() => {\\n        const nextIsWorkSession = !isWorkSession;\\n        setIsWorkSession(nextIsWorkSession);\\n        if (nextIsWorkSession) {\\n          setTime(1500); // 25 minutes work\\n        } else {\\n          setTime(sessionCount >= 4 ? 900 : 300); // 15 or 5 minutes break\\n        }\\n        setIsActive(true);\\n      }, 1000);\\n    }\\n\\n    return () => clearInterval(interval);\\n  }, [isActive, time, isWorkSession, sessionCount]);\\n\\n  const toggleSession = () => {\\n    setTime(1500);\\n    setIsActive(true);\\n    setIsWorkSession(true);\\n    setSessionCount(0);\\n  };\\n\\n  const startPauseHandler = () => {\\n    setIsActive(!isActive);\\n  };\\n\\n  const resetHandler = () => {\\n    if (!isActive) {\\n      setIsWorkSession(true);\\n      setSessionCount(0);\\n      setTime(1500);\\n    }\\n  };\\n\\n  const formatTime = (seconds: number): string => {\\n    const mins = Math.floor(seconds / 60).toString().padStart(2, '0');\\n    const secs = (seconds % 60).toString().padStart(2, '0');\\n    return `${mins}:${secs}`;\\n  };\\n\\n  return (\\n    <BaseWidget title=\\\"Pomodoro Timer\\\" width={300} height={200}>\\n      <div className=\\\"w-full h-full flex flex-col items-center justify-center p-4\\\">\\n        <div className=\\\"text-4xl font-bold mb-6\\\">\\n          {formatTime(time)}\\n        </div>\\n        <div className=\\\"text-xl mb-4\\\">\\n          {isWorkSession ? 'Work Session \\u23f1\\ufe0f' : 'Break Time \\ud83d\\udd52'}\\n        </div>\\n        <div className=\\\"flex space-x-4\\\">\\n          <button\\n            onClick={startPauseHandler}\\n            className=\\\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400\\\"\\n            title=\\\"{isActive ? 'Pause' : 'Start'} Timer\\\">\\n            {isActive ? 'Pause' : 'Start'}\\n          </button>\\n          <button\\n            onClick={resetHandler}\\n            className=\\\"px-4 py-2 bg-gray-300 rounded hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-400\\\"\\n            title=\\\"Reset Timer\\\">\\n            Reset\\n          </button>\\n        </div>\\n        <div className=\\\"mt-6 text-center\\\">\\n          {isWorkSession\\n            ? '25 minutes focused work, 5 minutes break'\\n            : 'Take a break, then work again'}\\n        </div>\\n        <div className=\\\"mt-2 text-sm\\\">\\n          Cycles: {isWorkSession ? 0 : Math.floor(sessionCount / 2) + 1}\\n        </div>\\n      </div>\\n    </BaseWidget>\\n  );\\n};\\n\\nexport default PomodoroTimer;\\n// index file:\\nimport React from 'react';\\nimport { WidgetDefinition } from '../../index';\\nimport PomodoroTimerComponent from './component';\\n\\nconst widgetDefinition: WidgetDefinition = {\\n  id: 'pomodoro-timer',\\n  name: 'Pomodoro Timer',\\n  description: 'Focus timer with work and break cycles for productivity',\\n  component: PomodoroTimerComponent,\\n  defaultProps: {\\n    width: 300,\\n    height: 200,\\n  },\\n  icon: '\\u23f0',\\n  category: 'productivity',\\n};\\n\\nexport default widgetDefinition;\", \"context\": null, \"expected_output\": null, \"hyperparameters\": null, \"input\": \"create a pomodoro timer widget\", \"retrieval_context\": null}": {"cached_metrics_data": [{"metric_data": {"name": "ComponentModularity [GEval]", "threshold": 0.5, "success": true, "score": 0.8, "reason": "The provided component output demonstrates modularity with clear separation of concerns, and its complexity is relatively easy to understand due to the use of functional components and hooks. The formatting and structure across the component outputs are consistent, following standard React practices. However, the ranking of component outputs in terms of ease of understanding and modularity could be further improved with additional documentation or comments explaining the purpose of each section.", "strictMode": false, "evaluationModel": "llama-3.3-70b-versatile", "evaluationCost": 0, "verboseLogs": "Criteria:\nDetermine if the 'component output' is modular and easy to understand. \n \nEvaluation Steps:\n[\n    \"Assess each component output for modularity by evaluating its independence from other components\",\n    \"Compare the complexity of each component output to determine if they are equally easy to understand\",\n    \"Evaluate the consistency of formatting and structure across all component outputs\",\n    \"Rank the component outputs in order of ease of understanding and modularity for comparison\"\n] \n \nRubric:\nNone \n \nScore: 0.8"}, "metric_configuration": {"threshold": 0.5, "evaluation_model": "llama-3.3-70b-versatile", "strict_mode": false, "criteria": "Determine if the 'component output' is modular and easy to understand.", "include_reason": false, "evaluation_steps": ["Assess each component output for modularity by evaluating its independence from other components", "Compare the complexity of each component output to determine if they are equally easy to understand", "Evaluate the consistency of formatting and structure across all component outputs", "Rank the component outputs in order of ease of understanding and modularity for comparison"], "evaluation_params": ["actual_output"]}}, {"metric_data": {"name": "Accuracy [GEval]", "threshold": 0.5, "success": true, "score": 1.0, "reason": "The 'index output' and 'component output' align with each other, as the component file implements a functional Pomodoro timer, and the index file defines the widget's properties. The evaluation steps are followed as the 'input' is a request to create a Pomodoro timer widget, which is accurately reflected in both the 'index output' and 'component output'. The widget's structure and functionality match the expected outcomes, with features such as start/pause, reset, and cycle tracking.", "strictMode": false, "evaluationModel": "llama-3.3-70b-versatile", "evaluationCost": 0, "verboseLogs": "Criteria:\nDetermine if the 'index output' and 'component ouptut' is an accurate implementation of the 'input'. \n \nEvaluation Steps:\n[\n    \"Compare the 'index output' and 'component output' to determine if they align with each other\",\n    \"Evaluate the 'input' to understand its requirements and expected outcomes\",\n    \"Assess whether the 'index output' and 'component output' accurately reflect the 'input' in terms of data, structure, and functionality\",\n    \"Verify that the 'index output' and 'component output' collectively implement all aspects of the 'input' without errors or inconsistencies\"\n] \n \nRubric:\nNone \n \nScore: 1.0"}, "metric_configuration": {"threshold": 0.5, "evaluation_model": "llama-3.3-70b-versatile", "strict_mode": false, "criteria": "Determine if the 'index output' and 'component ouptut' is an accurate implementation of the 'input'.", "include_reason": false, "evaluation_steps": ["Compare the 'index output' and 'component output' to determine if they align with each other", "Evaluate the 'input' to understand its requirements and expected outcomes", "Assess whether the 'index output' and 'component output' accurately reflect the 'input' in terms of data, structure, and functionality", "Verify that the 'index output' and 'component output' collectively implement all aspects of the 'input' without errors or inconsistencies"], "evaluation_params": ["actual_output", "input"]}}, {"metric_data": {"name": "Correctness [GEval]", "threshold": 0.5, "success": true, "score": 1.0, "reason": "The provided Actual Output is a fully functional React-based Pomodoro timer widget, aligning well with the expected input of creating a Pomodoro timer widget. It correctly implements the Pomodoro technique with work and break sessions, includes start, pause, and reset functionality, and displays the time and session status. The output also adheres to the specified requirements for seamless execution and compatibility with the given input and expected functionality.", "strictMode": false, "evaluationModel": "llama-3.3-70b-versatile", "evaluationCost": 0, "verboseLogs": "Criteria:\nDetermine if the 'index output' and 'component ouptut' appear as though they would run without error when executed.. \n \nEvaluation Steps:\n[\n    \"Compare the Actual Input with the expected input to identify potential errors.\",\n    \"Evaluate the Actual Output by checking if the 'index output' and 'component output' are logically consistent with the provided input.\",\n    \"Assess whether the Actual Output would execute without errors by analyzing its compatibility with the given input and expected functionality.\",\n    \"Verify that the Actual Input and Output align with the specified requirements, ensuring that they can be executed together seamlessly.\"\n] \n \nRubric:\nNone \n \nScore: 1.0"}, "metric_configuration": {"threshold": 0.5, "evaluation_model": "llama-3.3-70b-versatile", "strict_mode": false, "criteria": "Determine if the 'index output' and 'component ouptut' appear as though they would run without error when executed..", "include_reason": false, "evaluation_steps": ["Compare the Actual Input with the expected input to identify potential errors.", "Evaluate the Actual Output by checking if the 'index output' and 'component output' are logically consistent with the provided input.", "Assess whether the Actual Output would execute without errors by analyzing its compatibility with the given input and expected functionality.", "Verify that the Actual Input and Output align with the specified requirements, ensuring that they can be executed together seamlessly."], "evaluation_params": ["actual_output", "input"]}}]}}}